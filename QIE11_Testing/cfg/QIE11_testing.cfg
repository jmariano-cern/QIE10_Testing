# any line STARTING with '#' is a comment

# start each definition with <start_definition> and end with <end_definition>, each on it's own line
# every definition requires a name and type at minimum

# blocks must be declared AFTER name and type

# to fill a histogram, use the <fill> tag followed by the arguments to ->Fill()
      # example: <fill> (nTS, adc);

###########################################
<start_definition>
name = "General"
type = null

loop_vars = <start_block>
  int adcped = 4;
  float ph2ns[128] = {0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5,9.0,9.5,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,34.5,35.0,35.5,36.0,36.5,37.0,37.5,38.0,38.5,39.0,39.5,40.0,40.5,41.0,41.5,42.0,42.5,43.0,43.5,44.0,44.5,45.0,45.5,46.0,46.5,47.0,47.5,48.0,48.5,49.0,49.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  float qped = adc2fC_QIE11_refl[ adcped ];
  float qsum = 0;
  float qmax = 0;
  int ts_max = 0;
  float qmax2p = 0;
  float qmax2m = 0;
  float qmax3 = 0;
  int ts_TDC1 = -1;
  int ts_TDC2 = -1;
  int cid_TDC1 = -1;
  int cid_TDC2 = -1;
  int ts_ref = -1;
  int ref_ns = 117;
  float t_abs = -1.0;
  float t_cid = -1.0;
<end_block>

pre_loop = <start_block>

  global.qsum = 0;
  global.qmax = 0;
  global.ts_max = 0;
  global.ts_TDC1 = -1;
  global.ts_TDC2 = -1;
  global.cid_TDC1 = -1;
  global.cid_TDC2 = -1;
  bool TDC1_flag = 0;
  bool TDC2_flag = 0;
  for ( int iTS=0 ; iTS<digis.samples() ; iTS++) {
    global.qsum += adc2fC_QIE11_refl[ digis[iTS].adc() ] + 14.45;
    if ((adc2fC_QIE11_refl[ digis[iTS].adc() ] + 14.45) > global.qmax) {
      global.qmax = adc2fC_QIE11_refl[ digis[iTS].adc() ] + 14.45;
      global.ts_max = iTS;
    }
    if ((TDC1_flag == 0) && (digis[iTS].tdc() < 50)) {
      TDC1_flag = 1;
      global.ts_TDC1 = iTS;
      global.cid_TDC1 = digis[iTS].capid();
    }
    if ((TDC1_flag == 1) && (TDC2_flag == 0) && (digis[iTS].tdc() < 50)) {
      TDC2_flag = 1;
      global.ts_TDC2 = iTS;
      global.cid_TDC2 = digis[iTS].capid();
    }
  }
  global.t_abs = ((global.ts_TDC1)*25.0) + (digis[global.ts_TDC1].tdc()*0.5);
  global.t_cid = (global.cid_TDC1*25.0) + (digis[global.ts_TDC1].tdc()*0.5);

  global.qmax2p = -1;
  global.qmax2m = -1;
  global.qmax3 = -1;
  if (global.ts_max > 0) {
    global.qmax2m = adc2fC_QIE11_refl[ digis[global.ts_max-1].adc() ] + adc2fC_QIE11_refl[ digis[global.ts_max].adc() ] + (2*14.45);
  }
  if (global.ts_max < 9) {
    global.qmax2p = adc2fC_QIE11_refl[ digis[global.ts_max].adc() ] + adc2fC_QIE11_refl[ digis[global.ts_max+1].adc() ] + (2*14.45);
  } 
  if ((global.ts_max > 0) && (global.ts_max < 9)) {
    global.qmax3 = adc2fC_QIE11_refl[ digis[global.ts_max-1].adc() ] + adc2fC_QIE11_refl[ digis[global.ts_max].adc() ] + adc2fC_QIE11_refl[ digis[global.ts_max+1].adc() ] + (3*14.45);  
  }

  int ref_offset = 999;
  if (global.ts_TDC1 > -1) {
    ref_offset = ((int)(((float)digis[global.ts_TDC1].tdc()*0.5) + (float)global.ref_ns) - (int)(((float)digis[global.ts_TDC1].tdc()*0.5) + (float)global.ref_ns)%25)/25;
  }
  global.ts_ref = -1;
  if ((ref_offset + global.ts_TDC1) < 9) {
    global.ts_ref = ref_offset + global.ts_TDC1;
  }
<end_block>

loop = <start_block>
  int tTS = digis.samples();
  tTS = tTS;
  int adc = digis[nTS].adc();
  adc = adc;
  int le_tdc = digis[nTS].tdc();
  le_tdc = le_tdc;
  int capid = digis[nTS].capid();
  capid = capid;
  int soi = digis[nTS].soi();
  soi = soi;
  float charge = adc2fC_QIE11_refl[ adc ] + 14.45;
  charge = charge;
<end_block>

<end_definition>
###########################################
<start_suite>
name = "PedestalData"
code = 1
null = "General"
TH1F_perEV = "ADC_spectrum_EV" , "QSum_EV" , "T_abs_EV" 
TH1F_perCH = "ADC_spectrum_CH" , "QSum_CH" , "T_abs_CH"
TH2F_perEV = "ADCvsTS_EV" , "ADCvsCID_EV" , "QvsTS_EV"
TH2F_perCH = "ADCvsTS_CH" , "ADCvsCID_CH" , "QvsTS_CH"
<end_suite>
###########################################
<start_definition>
name = "ADC_spectrum_EV"
type = TH1F_perEV
nbinsx = 256
lowx = -0.5
highx = 255.5
titlex = "ADC"

loop = <start_block>
  <fill_perEV> ( adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADC_spectrum_CH"
type = TH1F_perCH
nbinsx = 256
lowx = -0.5
highx = 255.5
titlex = "ADC"

loop = <start_block>
  <fill_perCH> ( adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADCvsTS_CH"
type = TH2F_perCH
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 256
lowy = -0.5
highy = 255.5
titley = "ADC"

loop = <start_block>
  <fill_perCH> ( nTS, adc );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "ADCvsTS_EV"
type = TH2F_perEV
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 256
lowy = -0.5
highy = 255.5
titley = "ADC"

loop = <start_block>
  <fill_perEV> ( nTS, adc );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QvsTS_CH"
type = TH2F_perCH
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 5000
lowy = 0
highy = 250000
titley = "Q (fC)"

loop = <start_block>
  <fill_perCH> ( nTS, charge );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QvsTS_EV"
type = TH2F_perEV
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 5000
lowy = 0
highy = 250000
titley = "Q (fC)"

loop = <start_block>
  <fill_perEV> ( nTS, charge );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QSum_EV"
type = TH1F_perEV
nbinsx = 600
lowx = 0
highx = 600000
titlex = "Integrated Charge (fC)"

post_loop = <start_block>
  <fill_perEV> ( global.qsum );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QSum_CH"
type = TH1F_perCH
nbinsx = 600
lowx = 0
highx = 600000
titlex = "Integrated Charge (fC)"

post_loop = <start_block>
  <fill_perCH> ( global.qsum );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "ADCvsCID_EV"
type = TH2F_perEV
nbinsx = 4
lowx = -0.5
highx = 3.5
titlex = "CID"
nbinsy = 25
lowy = 0
highy = 50
titley = "ADC"

loop = <start_block>
  <fill_perEV> ( capid , adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADCvsCID_CH"
type = TH2F_perCH
nbinsx = 4
lowx = -0.5
highx = 3.5
titlex = "CID"
nbinsy = 25
lowy = 0
highy = 50
titley = "ADC"

loop = <start_block>
  <fill_perCH> ( capid , adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "T_abs_EV"
type = TH1F_perEV
nbinsx = 250
lowx = -0.5
highx = 249.5
titlex = "t (ns)"

post_loop = <start_block>
  if (global.t_abs > -1) {
    <fill_perEV> (global.t_abs);
  }
<end_block>

<end_definition>
###########################################
<start_definition>
name = "T_abs_CH"
type = TH1F_perCH
nbinsx = 250
lowx = -0.5
highx = 249.5
titlex = "t (ns)"

post_loop = <start_block>
  if (global.t_abs > -1) {
    <fill_perCH> (global.t_abs);
  }
<end_block>

<end_definition>
###########################################
##########################################
<start_suite>
name = "PhaseScanner"
code = 2
null = "General"
TH1F_perEV = 
TH1F_perCH = 
TH2F_perEV = "phase_scan_EV"
TH2F_perCH = "phase_scan_CH"
<end_suite>
###########################################
<start_definition>
name = "phase_scan_CH"
type = TH2F_perCH
nbinsx = 100
lowx = -0.25
highx = 49.75
titlex = "phase (ns)"
nbinsy = 250
lowy = -0.5
highy = 249.5
titley = "Pulse Arrival Time (ns)"

post_loop = <start_block>
  if (global.t_abs > -1) {
    <fill_perCH> ( global.ph2ns[(int)val.at(0)] , global.t_abs);
  }
<end_block>

<end_definition>
###########################################
<start_definition>
name = "phase_scan_EV"
type = TH2F_perEV
nbinsx = 100
lowx = -0.25
highx = 49.75
titlex = "phase (ns)"
nbinsy = 250
lowy = -0.5
highy = 249.5
titley = "Pulse Arrival Time (ns)"

post_loop = <start_block>
  if (global.t_abs > -1) {
    <fill_perEV> ( global.ph2ns[(int)val.at(0)] , global.t_abs);
  }
<end_block>

<end_definition>
##########################################
<start_suite>
name = "DataDump"
code = 3
null = "General"
TH1F_perEV = 
TH1F_perCH = 
TH2F_perCH = 
TH2F_perEV = 
logger = "DataDump"
<end_suite>
##########################################
<start_definition>
name = "DataDump"
type = logger
log_file = "../log/DataDumpLog.log"

pre_loop = <start_block>
  DetId detid_loc_y = digis.detid();
  HcalDetId hcaldetid_loc_y = HcalDetId(detid_loc_y);
  int iEta_loc_y = hcaldetid_loc_y.ieta();
  int iPhi_loc_y = hcaldetid_loc_y.iphi();
  int Depth_loc_y = hcaldetid_loc_y.depth();

  if (_event_num < 3){
    <log> "#############" << endl;
    <log> "# HF: " << Depth_loc_y << endl;
    <log> "# Slot: " << iPhi_loc_y << endl;
    <log> "# QIE: " << iEta_loc_y << endl;
    <log> "# nEV:" << _event_num << endl;
    for (int iTS=0 ; iTS<10 ; iTS++) {
      <log> "TS:" <<iTS << "  --  CID " << digis[iTS].capid() << "  --  ADC " << digis[iTS].adc() << "  --  leTDC " << digis[iTS].tdc() << "  <<<<<<<<" << endl;
    }
    <log> "#############" << endl;
  }
<end_block>

<end_definition>

